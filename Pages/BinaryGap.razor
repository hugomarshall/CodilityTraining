@page "/binarygap"
@using System.Text

<PageTitle>Binary Gap</PageTitle>

<MudText Typo="Typo.h3">Binary Gap</MudText>
<MudText Class="mb-4">Find longest sequence of zeros in binary representation of an integer.</MudText>
<MudCard>
    <MudCardContent>
        <MudText Class="mx-10 mb-4" Typo="Typo.body2">
            <p>
                A binary gap within a positive integer N is any maximal sequence of consecutive zeros that is surrounded by ones at both ends in the binary representation of N.
            </p>
            <p>
                For example: <br />
                <div class="mx-10">
                    Number 9 has binary representation 1001 and contains a binary gap of length 2. <br />
                    The number 529 has binary representation 1000010001 and contains two binary gaps: one of length 4 and one of length 3. <br />
                    The number 20 has binary representation 10100 and contains one binary gap of length 1. <br />
                    The number 15 has binary representation 1111 and has no binary gaps. <br />
                    The number 32 has binary representation 100000 and has no binary gaps.
                </div>
            </p>

            <p>
                Write a function: <br />
                class Solution { public int solution(int N); } that, given a positive integer N, returns the length of its longest binary gap. The function should return 0 if N doesn't contain a binary gap.
            </p>
            <p>
                For example: <br />
                Given N = 1041 the function should return 5, because N has binary representation 10000010001 and so its longest binary gap is of length 5. <br />
                Given N = 32 the function should return 0, because N has binary representation '100000' and thus no binary gaps.
            </p>
            <p>
                Write an efficient algorithm for the following assumptions: <br />

                N is an integer within the range [1..2,147,483,647].
            </p>
        </MudText>
    </MudCardContent>
</MudCard>
<MudStack Row="true" Justify="Justify.FlexEnd" AlignItems="AlignItems.Baseline">
    <MudTextField InputMode="InputMode.numeric" T="int" Variant="Variant.Text" Clearable="true" MaxLength="2147483647" @bind-Value="value" AutoFocus="true" Label="Enter an int" HelperText="Enter a value between 1 and 2,147,483,647."></MudTextField>
    <MudButton OnClick="FindGap" Variant="Variant.Outlined" Size="Size.Medium" Color="Color.Success">Find</MudButton>
</MudStack>
@if (showResult)
{
    <MudText Typo="Typo.h6">Result</MudText>
    @:Value: @value
    <br />
    @:Binary: @binary
    <br />
    @:Gaps: @gaps
    <br />
    @:Longest gap lenght: @biggestGap
    <br />
    @:Code:
    <br />
    <CodeSnippet Language="Language.csharp" Style="Style.Dark">
        @(Code())
    </CodeSnippet>
}




@code {
    public int value { get; set; }
    public string binary { get; set; } = string.Empty;
    public int gaps { get; set; }
    public int biggestGap { get; set; }
    private bool showResult { get; set; }

    void FindGap()
    {
        showResult = true;
        gaps = 0;
        biggestGap = 0;
        binary = Convert.ToString(value, 2);
        for (int i = 0; i < binary.Length; i++)
        {
            if (binary[i] == '1')
            {
                var nextPosition = i + 1;
                var gapLenght = 0;
                while (binary.Length > nextPosition && binary[nextPosition] == '0')
                {
                    ++gapLenght;
                    ++nextPosition;
                    if (binary.Length > nextPosition && binary[nextPosition] == '1')
                    {
                        gaps++;
                        i = nextPosition - 1;
                        biggestGap = biggestGap < gapLenght ? gapLenght : biggestGap;
                        gapLenght = 0;
                    }
                }
            }
        }
        this.StateHasChanged();
    }

    private string Code()
    {
        var strBuilder = new StringBuilder();
        var code = strBuilder.AppendLine("gaps = 0;");
        strBuilder.AppendLine("biggestGap = 0;");
        strBuilder.AppendLine("binary = Convert.ToString(value, 2);");
        strBuilder.AppendLine("for (int i = 0; i < binary.Length; i++)");
        strBuilder.AppendLine("{");
        strBuilder.AppendLine("     if (binary[i] == '1')");
        strBuilder.AppendLine("     {");
        strBuilder.AppendLine("         var nextPosition = i + 1;");
        strBuilder.AppendLine("         var gapLenght = 0;");
        strBuilder.AppendLine("         while (binary.Length > nextPosition && binary[nextPosition] == '0')");
        strBuilder.AppendLine("         {");
        strBuilder.AppendLine("             ++gapLenght;");
        strBuilder.AppendLine("             ++nextPosition;");
        strBuilder.AppendLine("             if (binary.Length > nextPosition && binary[nextPosition] == '1')");
        strBuilder.AppendLine("             {");
        strBuilder.AppendLine("                 gaps++;");
        strBuilder.AppendLine("                 i = nextPosition - 1;");
        strBuilder.AppendLine("                 biggestGap = biggestGap < gapLenght ? gapLenght : biggestGap;");
        strBuilder.AppendLine("                 gapLenght = 0;");
        strBuilder.AppendLine("             }");
        strBuilder.AppendLine("         }");
        strBuilder.AppendLine("     }");
        strBuilder.AppendLine("}");
        strBuilder.AppendLine("return gapLenght;");
        return code.ToString();
    }
}
